----- ASSIGNMENT-3 -----

1. Write an assignment statement using a single conditional expression for the following if-else code:
  if marks >= 70:
    remarks = ’good’
  else:
    remarks = ’average’

Ans: remarks = "good" if marks >= 70 else "average"


2. Write a program that implements the conversion from human to dog years.
Ans:
def dog_years(human_years):
  if human_years <= 2:
    return human_years * 10.5
  else:
    return 21 + (human_years - 2) * 4

human_years = int(input("Enter the human years: "))
assert human_years >= 0, "Invalid input"
print("The dog years are: ", dog_years(human_years))


3. The length of a month varies from 28 to 31 days. Create a program that reads the month’s name from the user as a string. Then your program should display the number of days in that month. Display “28 or 29 days” for February so that leap years is addressed.
Ans:
months = ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

def days_in_month(month):
  if month in ("January", "March", "May", "July", "August", "October", "December"):
    return 31
  elif month in ("April", "June", "September", "November"):
    return 30
  elif month == "February":
    return "28 or 29"
  else:
    return "Invalid month"

month = input("Enter the month name: ")
print("The number of days in the month is:", days_in_month(month))

4. Write a program that simulates a spin of a roulette wheel by using Python’s random number generator. Display the number that was selected and all of the bets that must be payed.

Ans:
import random

def spin():
    return random.randint(0, 37)

def get_color(number):
    if number == 0:
        return "Green"
    elif number % 2:
        return "Black"
    else:
        return "Red"

def get_parity(number):
    if number == 0 or number == 37:
        return "Neither"
    elif number % 2 == 0:
        return "Even"
    else:
        return "Odd"

def get_range(number):
    if number == 0 or number == 37:
        return "Neither"
    elif number <= 18:
        return "1 to 18"
    else:
        return "19 to 36"

def main():
    number = spin()
    print("The spin resulted in", (number if number != 37 else "00"))
    print("Pay", number if number != 37 else "00")
    print("Pay", get_color(number))
    print("Pay", get_parity(number))
    print("Pay", get_range(number))

if __name__ == "__main__":
    main()


5. The following table lists the sound level in decibels for several common noises. Write a program that reads a sound level in decibels from the user. If the user enters a decibel level that matches one of the noises in the table then your program should display a message containing only that noise.

Ans:
from itertools import pairwise

noises = [
    (40, "Quiet Room"),
    (70, "Alarm Clock"),
    (106, "Gas Lawnmower"),
    (130, "Jackhammer"),
]

def get_noise(decibels):
    for lower, higher in pairwise(noises):
        if decibels == lower[0]:
            return lower[1]
        elif decibels == higher[0]:
            return higher[1]
        elif lower[0] < decibels < higher[0]:
            return f"Between {lower[1]} and {higher[1]}"


if __name__ == "__main__":
    decibels = int(input("Enter the decibel level: "))
    print(get_noise(decibels))

6. Write a python script to assign a grade to a student based on marks obtained as per the criteria mentioned in the above table:

def assign_grade(marks):
    if marks >= 90:
        return "A"
    elif marks >= 70 and marks < 90:
        return "B"
    elif marks >= 50 and marks < 70:
        return "C"
    elif marks >= 40 and marks < 50:
        return "D"
    else:
        return "F"
  
if __name__ == "__main__":
    marks = int(input("Enter the marks: "))
    print("The grade is: ", assign_grade(marks))

7. Study the program segments given below. In each case, give the output produced, if any.
a.  total = 0
    count = 20
    while count > 5:
        total += count
        count -= 1
    print(total) ->  210


b.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, i+1):
            total += 1
    print(total) -> 15

c. 55
d.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, i+1):
            total += 1
        total -= 1
    print(total) -> 10
e.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, N+1):
            total += i
    print(total) -> 75
f.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, i+1):
            total += j
    print(total) -> 35
g.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, N+1):
            total += i+j
    print(total) -> 150
h.  total = 0
    N=5
    for i in range(1, N+1):
        for j in range(1, i+1):
            for k in range(1, j+1):
                total += 1
    print(total) -> 35
i.  number = 72958476
    a, b = 0, 0
    while (number > 0):
        digit = number % 10
        if(digit % 2 != 0):
            a += digit
        else:
            b += digit
        number /= 10
    print(a,b) ->  29 34
8. Write a function to determine whether a given natural number is perfect. A natural number is said to
be a perfect number if it is the sum of its divisors. For Example, 6 is a perfect number because 6 =
1+2+3, but 15 is not because 15 != 1+3+5.
Ans:
def is_perfect(n):
    sum = 0
    for i in range(1, n):
        if n % i == 0:
            sum += i
    return sum == n

9. Write a program to find the maximum of three numbers using a nested function.
Ans:
def max_of_three(a, b, c):
    def max_of_two(a, b):
        if a > b:
            return a
        else:
            return b

    return max_of_two(a, max_of_two(b, c))


if __name__ == "__main__":
    a, b, c = map(int, input("Enter three numbers: ").split())
    print("The maximum of the three numbers is:", max_of_three(a, b, c))


10. Write a function that takes two numbers as input parameters and returns their least common multiple.
Ans:
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

def lcm(a, b):
    return (a * b) // gcd(a, b)

if __name__ == "__main__":
    a, b = map(int, input("Enter two numbers: ").split())
    print("The LCM of the two numbers is:", lcm(a, b))

11. Write a function that takes two numbers as input parameters and returns their greatest common divisor.
Ans:
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

12. Write a function that accepts as an input parameter the number of rows to be printed and prints a
figure like:
a)
1
1   2
1   2   3
1   2   3   4
Ans:
def print_pattern1(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end="\t")
        print()
print_pattern(5)

b)
            1
        2   1   2
    3   2   1   2   3
4   3   2   1   2   3   4
Ans:
def print_pattern2(n):
    for i in range(1, n+1):
        print("\t"* (n-i), end="")
        print(*(range(i, 0, -1) + range(2, i+1)), sep="\t")
        print()

c)
5   4   3   2   1
    4   3   2   1
        3   2   1
            2   1
                1
ans:
def print_pattern3(n):
    for i in range(n, 0, -1):
        print("\t" * (n-i), end="")
        print(*range(i, 0, -1), sep="\t")
        print()

d)
1
2   2
3   3   3
4   4   4   4
5   5   5   5   5
ans:
def print_pattern4(n):
    for i in range(1, n+1):
        print(*[i]*i, sep="\t")
        print()

e)
1   2   3   4   5
    2   3   4   5
        3   4   5
            4   5
                5
ans:
def print_pattern5(n):
    for i in range(1, n+1):
        print("\t" * (i-1), end="")
        print(*range(i, n+1), sep="\t")
        print()

f)
*   *   *   *   *
*               *
*               *
*               *
*   *   *   *   *
ans:
def print_pattern6(n):
    for i in range(1, n+1):
        if i == 1 or i == n:
            print(*["*"]*n, sep="\t")
        else:
            print("*", "\t"*(n-2), "*", sep="\t")
        print()

g)
*   *   *   *   *
*   *   *   *   *
*   *   *   *   *
*   *   *   *   *
*   *   *   *   *
ans:
def print_pattern7(n):
    for i in range(1, n+1):
        print(*["*"]*n, sep="\t")
        print()

h)
            *
        *   *   *
    *   *   *   *   *
*   *   *   *   *   *   *
ans:
def print_pattern8(n):
    for i in range(1, n+1):
        print("\t" * (n-i), end="")
        print(*["*"]*i, sep="\t")
        print()

i)
*   *   *   *   *   *   *
    *              *
        *       *
            *   
ans:
def print_pattern9(n):
    for i in range(1, n+1):
        if i == 1 or i == n:
            print(*["*"]*n, sep="\t")
        else:
            print("\t" * (i-1), "*", sep="\t")
        print()

l)
            *
        *       *
    *              *
*                      *
    *               *
        *       *
            *
ans:
def print_pattern10(n):
    for i in range(1, n+1):
        if i <= n//2:
            print("\t" * (n-i), "*", sep="\t")
        elif i == n//2 + 1:
            print(*["*"]*n, sep="\t")
        else:
            print("\t" * (i-n//2-1), "*", sep="\t")
        print()

13. Write a function that finds the sum of the n terms of the following series:
a. 1 − x2 /2! + x4 /4! − x6 /6! + ...xn /n!
Ans)
import math
def series(x, n):
    series_sum = 0
    for i in range(n):
        series_sum += ((-1) ** i) * (x ** (2 * i)) / math.factorial(2 * i)
    return series_sum

b. ex = 1 + x/1! + x2 /2! + x3 /3! + ...
Ans)
import math
def series(x, n):
    series_sum = 0
    for i in range(n):
        series_sum += (x ** i) / math.factorial(i)
    return series_sum

14. Write a function that returns True or False depending on whether the given number is a palindrome.
Ans:
def is_palindrome(n):
    return str(n) == str(n)[::-1]
15. Write a function that returns the sum of digits of a number, passed to it as an argument.
Ans)
def sum_of_digits(n):
    return sum(map(int, str(n)))
16. Write a program that prints Armstrong numbers in the range 1 to 1000. An Armstrong number is a
number whose sum of the cubes of the cubes of the digits is equal to the number itself. For Example,
370 = 33 + 73 + 03
Ans:
def is_armstrong(n):
    return sum(map(lambda x: x ** 3, map(int, str(n)))) == n

17. Write a function that takes two numbers as input parameters and returns True or False depending on
whether they are co-primes. Two numbers are said to be co-prime if they do not have any common
divisor other than one.

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

def is_coprime(a, b):
    return gcd(a, b) == 1

18. Write a function to multiply two non-negative numbers by repeated addition, for example, 7*5 =
7+7+7+7+7.

def multiply(a, b):
    if a == 0 or b == 0:
        return 0
    elif b == 1:
        return a
    else:
        return a + multiply(a, b-1)

19. Write a program that computes the average of a collection of values entered by the user. The user will
enter 0 as a sentinel value to indicate that no further values will be provided. The program should
display an appropriate error message if the first value entered by the user is 0
Ans:
def average():
    sum = 0
    count = 0
    while True:
        num = int(input("Enter a number: "))
        if num == 0:
            break
        sum += num
        count += 1
    if count == 0:
        print("No numbers were entered")
    else:
        print("The average is:", sum / count)

20. Write a program that uses a loop to generate this table, showing the original price, the
discount amount, and the new price for purchases of $4.95, $9.95, $14.95, $19.95 and $24.95. Ensure
that the discount amounts and the new prices are rounded to 2 decimal places when displayed.

def discount_table():
    for price in (4.95, 9.95, 14.95, 19.95, 24.95):
        print(f"Original price: {price:.2f}")
        print(f"Discount amount: {price * 0.6:.2f}")
        print(f"New price: {price * 0.4:.2f}")
        print()

21. Write a program that reads an integer from the user. If the value entered by the user is less than 2 then
your program should display an appropriate error message. Otherwise, your program should display
the prime numbers that can be multiplied together to compute n, with one factor appearing on each
line. For example:
Enter an integer (2 or greater): 72
The prime factors of 72 are:
2
2
2
3
3
Ans:
def prime_factors(n):
    factors = []
    i = 2
    while n > 1:
        if n % i == 0:
            factors.append(i)
            n //= i
        else:
            i += 1
    return factors

if __name__ == "__main__":
    n = int(input("Enter an integer (2 or greater): "))
    if n < 2:
        print("Invalid input")
    else:
        print(f"The prime factors of {n} are:")
        print(*prime_factors(n), sep="\n")